from typing import Tuple, Dict
from gymnasium import Env
from gymnasium import spaces
import numpy as np


class TicTacToeEnv(Env):
  """
  TicTacToe gym environment to test MCTS out.
  Env code generated by ChatGPT
  """

  def __init__(self) -> None:
    self.board = np.zeros((3, 3), dtype=int)
    self.current_player = 1
    self.action_space = spaces.Discrete(9)
    self.observation_space = spaces.MultiBinary(9)

  def reset(self) -> np.ndarray:
    self.board = np.zeros((3, 3), dtype=int)
    self.current_player = 1
    return self.board.flatten()

  def step(self, action: int) -> Tuple[np.ndarray, int, bool, Dict]:
    """
    Step the env given an action, returning a tuple:
    (observation, reward, terminal, info)
    """
    row = action // 3
    col = action % 3
    if self.board[row][col] != 0:
      return self.board.flatten(), -10, True, {}
    self.board[row][col] = self.current_player
    done = self.is_game_over()
    reward = self.get_reward(done)
    self.current_player = -self.current_player
    return self.board.flatten(), reward, done, {}


def is_game_over(self) -> bool:
  # Check rows
  for row in range(3):
    if abs(sum(self.board[row])) == 3:
      return True
  # Check columns
  for col in range(3):
    if abs(sum(self.board[:, col])) == 3:
      return True
  # Check diagonals
  if abs(sum(np.diag(self.board))) == 3 or abs(
      sum(np.diag(np.fliplr(self.board)))) == 3:
    return True
  # Check for a draw
  if np.all(self.board != 0):
    return True
  return False


def get_reward(self, done: bool) -> float:
  if done:
    # Check rows
    for row in range(3):
      if abs(sum(self.board[row])) == 3:
        return 10 * self.current_player
    # Check columns
    for col in range(3):
      if abs(sum(self.board[:, col])) == 3:
        return 10 * self.current_player
    # Check diagonals
    if abs(sum(np.diag(self.board))) == 3 or abs(
        sum(np.diag(np.fliplr(self.board)))) == 3:
      return 10 * self.current_player
    # Draw game
    return 0

  return 0
